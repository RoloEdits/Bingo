@page "/table/solver"
@using Bingo.Domain
@using Bingo.Domain.Models
@using Bingo.Domain.ValueObjects
@using Bingo.Spreadsheet
@using System.Text

@inject GameCache Cache

<MudStack Spacing="3" AlignItems="AlignItems.Center" Justify="Justify.Center">
    <GameInput Rows="Rows"
               Columns="Columns"
               BonusColumns="BonusColumns"
               BaseSquareValue="BaseSquareValue"
               RowValueOffset="RowValueOffset"
               BonusMultiplier="BonusMultiplier"
               BonusSkipChar="BonusSkipChar"
               LogAllSameGuesses="LogAllSameGuesses"
               AllowSkippingWhenBonusColumnsAreZero="AllowSkippingWhenBonusColumnsAreZero"
               Key="GameKey"
               Mask="Mask">
    </GameInput>
    @* Squares *@
    <MudPaper Elevation="5" Height="850px" Width="890px">
        @for (var row = 0; row < Rows; row++)
        {
            var rowHolder = row;
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="4" Style="position:relative; margin:auto;">
                @for (var column = 0; column < Columns; column++)
                {
                    var columnHolder = column;
                    var isBonus = (column + BonusColumns) >= Columns;

                    <MudStack Class="py-2" AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudPaper Class="mud-width-full" Style="color: #c3c3c5; background: #27272f" Width="38px" Height="38px" Elevation="@(isBonus ? 20 : 4)">
                            <MudText Typo="Typo.h5"  Align="Align.Center">@Label.Squares[rowHolder, columnHolder]</MudText>
                        </MudPaper>
                    </MudStack>
                }
            </MudStack>
        }
    </MudPaper>
</MudStack>
<MudButton FullWidth="true" Color="Color.Success" Variant="Variant.Filled" @onclick="PlayGame">Score Game</MudButton>

@code {

    static int Rows { get; set; }
    static int Columns { get; set; }
    static int BonusColumns { get; set; }
    static int BaseSquareValue { get; set; }
    static int RowValueOffset { get; set; }
    static int BonusMultiplier { get; set; }
    static char BonusSkipChar { get; set; }
    static int TotalSquares { get; set; } = Rows * Columns;

    static bool LogAllSameGuesses { get; set; }
    static bool AllowSkippingWhenBonusColumnsAreZero { get; set; }

    static string GameKey { get; set; }
    static string Mask => KeyMask();

    string _fileStream;

    protected override void OnInitialized()
    {
        Rows = 3;
        Columns = 3;
        BonusColumns = 0;
        BonusMultiplier = 1;
        BonusSkipChar = 'P';
        LogAllSameGuesses = false;
        AllowSkippingWhenBonusColumnsAreZero = false;
        GameKey = string.Empty;
    }

    private void PlayGame()
    {
        var card = new Card((byte)Columns, (byte)Rows, (byte)BaseSquareValue,RowValueOffset,(byte)BonusColumns,(byte)BonusMultiplier,BonusSkipChar.CharToUpper());
        var settings = new Settings(AllowSkippingWhenBonusColumnsAreZero, LogAllSameGuesses);
        var game = new Game(GameKey.StringFormat(), card, settings);

        var players = ParseFileStream();
        game.AddPlayers(players);

        game.Play();

        Cache.Game = game;
    }

    private HashSet<SpreadsheetData> ParseFileStream()
    {
        // var result = Parser.Parse(_fileStream);
        var tempPlayers = new HashSet<SpreadsheetData>() {new SpreadsheetData(1, "Rolo", "YYNYNNNYNNNY")};
        return tempPlayers;
        // return result;
    }

    private static string KeyMask()
    {
        var builder = new StringBuilder();
        const string a = "a";

        for (var row = 0; row < Rows; row++)
        {
            for (var column = 0; column < Columns; column++)
            {
                builder.Append(a);
            }

            builder.Append(" ");
        }

        return builder.ToString();
    }
}
